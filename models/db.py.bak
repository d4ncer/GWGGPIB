# -*- coding: utf-8 -*-

#########################################################################
## This scaffolding model makes your app work on Google App Engine too
## File is released under public domain and you can use without limitations
#########################################################################

## if SSL/HTTPS is properly configured and you want all HTTP requests to
## be redirected to HTTPS, uncomment the line below:
# request.requires_https()

if not request.env.web2py_runtime_gae:
    ## if NOT running on Google App Engine use SQLite or other DB
    db = DAL('sqlite://storage.sqlite')
else:
    ## connect to Google BigTable (optional 'google:datastore://namespace')
    db = DAL('google:datastore')
    ## store sessions and tickets there
    session.connect(request, response, db = db)
    ## or store session in Memcache, Redis, etc.
    ## from gluon.contrib.memdb import MEMDB
    ## from google.appengine.api.memcache import Client
    ## session.connect(request, response, db = MEMDB(Client()))

## by default give a view/generic.extension to all actions from localhost
## none otherwise. a pattern can be 'controller/function.extension'
response.generic_patterns = ['*'] if request.is_local else []
## (optional) optimize handling of static files
# response.optimize_css = 'concat,minify,inline'
# response.optimize_js = 'concat,minify,inline'

#########################################################################
## Here is sample code if you need for
## - email capabilities
## - authentication (registration, login, logout, ... )
## - authorization (role based authorization)
## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)
## - old style crud actions
## (more options discussed in gluon/tools.py)
#########################################################################

from gluon.tools import Auth, Crud, Service, PluginManager, prettydate
auth = Auth(db, hmac_key=Auth.get_or_create_key(), salt=True)
crud, service, plugins = Crud(db), Service(), PluginManager()

## create all tables needed by auth if not custom tables
auth.define_tables()

## configure email
mail=auth.settings.mailer
mail.settings.server = 'logging' or 'smtp.gmail.com:587'
mail.settings.sender = 'you@gmail.com'
mail.settings.login = 'username:password'

## configure auth policy
auth.settings.registration_requires_verification = False
auth.settings.registration_requires_approval = True
auth.settings.reset_password_requires_verification = True

## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.
## register with janrain.com, write your domain:api_key in private/janrain.key
from gluon.contrib.login_methods.rpx_account import use_janrain
use_janrain(auth,filename='private/janrain.key')

#########################################################################
## Define your tables below (or better in another model file) for example
##
## >>> db.define_table('mytable',Field('myfield','string'))
##
## Fields can be 'string','text','password','integer','double','boolean'
##       'date','time','datetime','blob','upload', 'reference TABLENAME'
## There is an implicit 'id integer autoincrement' field
## Consult manual for more options, validators, etc.
##
## More API examples for controllers:
##
## >>> db.mytable.insert(myfield='value')
## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)
## >>> for row in rows: print row.id, row.myfield
#########################################################################

## after defining tables, uncomment below to enable auditing
auth.enable_record_versioning(db)

def sweep_up_btn(field, value):
    return INPUT(_name=field.name,
                 _type='button',
                 _id="%s_%s" % (field._tablename, field.name),
                 _class=field.type,
                 _value='UP',
                 requires=field.requires)
                 
def sweep_down_btn(field, value):
    return INPUT(_name=field.name,
                 _type='button',
                 _id="%s_%s" % (field._tablename, field.name),
                 _class=field.type,
                 _value='DOWN',
                 requires=field.requires)
                 
def calc_sweep_btn(field, value):
    return INPUT(_name=field.name,
                 _type='button',
                 _id="%s_%s" % (field._tablename, field.name),
                 _class=field.type,
                 _value='Calculate',
                 requires=field.requires)                  

db = DAL('sqlite://db.db')
db.define_table('gpib',
    Field('device',requires=IS_IN_SET(['Glass','Medium'])),
    Field('run_type',requires=IS_IN_SET(['PSD','Sweep'])),
    Field('multiple_runs','boolean'),
    Field('number_runs','integer'),
    Field('frequency_start',requires=IS_NOT_EMPTY()),
    Field('frequency_range',requires=IS_NOT_EMPTY()),
    Field('source_level',requires=IS_NOT_EMPTY()),
    Field('source_offset',requires=IS_NOT_EMPTY()),
    Field('sweep_rate'),
    Field('calculate_sweep_rate',widget=calc_sweep_btn),
    Field('sweep_up',widget=sweep_up_btn),
    Field('sweep_down',widget=sweep_down_btn))

db.gpib.frequency_range.label = 'Frequency Range/Step Size'
db.gpib.number_runs.label = 'Number of Runs'

db.gpib.source_level.default = '1'
db.gpib.source_offset.default = '1'

db.define_table('results',
    Field('time','datetime'),
	Field('device'),
    Field('run_type'),
    Field('start_frequency'),
    Field('frequency_range'),
    Field('source_level'),
    Field('source_offset'),
	Field('sweep_rate'))

db.define_table('data',
    Field('x'),
    Field('yr'),
    Field('ya'),
    Field('plot_link'))


#db.data.id.represent=lambda id: SPAN(A(IMG(_src=URL(r=request,c='default',f='plot_thumb',args=id),_href=URL(r=request,c='default',f='plot_data',args=id))))
db.data.id.represent=lambda id: SPAN(A(IMG(_src=URL(r=request,c='default',f='plot_thumb',args=id),_width="80px",_height="64px",_title=request.vars.start_frequency),
      _href=URL(r=request,c='default',f='plot_data',args=id),_rel="lightbox[gpib]"))

db.data.id.label='Data Plot'
